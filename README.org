
* Project
Initialize the project by:
#+begin_src sh
git submodule update --init --recursive
#+end_src

* Base directory
#+begin_src sh
if [ ! -d '.git' ]; then
    echo 'The current directory is NOT the project root.'
fi
#+end_src

* Setup
** Dataset
#+begin_src sh
DOWNLOAD_PATH=../download
DATA_PATH=../data

mkdir -p $DOWNLOAD_PATH
wget -O $DOWNLOAD_PATH/KQAPro.IID.zip https://cloud.tsinghua.edu.cn/f/04ce81541e704a648b03/?dl=1
unzip $DOWNLOAD_PATH/KQAPro.IID.zip -d $DATA_PATH
mkdir -p ./dataset
ln -s $(realpath $DATA_PATH/KQAPro.IID) ./dataset/kqapro
#+end_src

** Pre-trained model (optional)
#+begin_src sh
DOWNLOAD_PATH=../download
PRETRAINED_PATH=../pretrained

wget -O $DOWNLOAD_PATH/bart-base.zip https://cloud.tsinghua.edu.cn/f/3b59ec6c43034cfc8841/?dl=1
unzip $DOWNLOAD_PATH/bart-base.zip -d $PRETRAINED_PATH
ln -s $(realpath $PRETRAINED_PATH) ./pretrained
#+end_src

** Environment
#+begin_src sh
ENV_NAME=kqapro
conda create -y -n $ENV_NAME python=3
conda activate $ENV_NAME

# pytorch for CUDA 11.6
pip install torch==1.12.0+cu116 torchvision==0.13.0+cu116 torchaudio==0.12.0 --extra-index-url https://download.pytorch.org/whl/cu116
pip install -r requirements.txt
#+end_src

* Running
** Preprocessing
#+begin_src sh
python -m domain.kqapro.preprocess --goal augmented_train_set
python -m domain.kqapro.preprocess --goal augmented_val_set
python -m domain.kqapro.preprocess --goal encoded_train_set
python -m domain.kqapro.preprocess --goal encoded_val_set
python -m domain.kqapro.preprocess --goal encoded_test_set
python -m domain.kqapro.preprocess --goal shuffled_augmented_train_set
python -m domain.kqapro.preprocess --goal shuffled_encoded_train_set
python -m domain.kqapro.preprocess --goal augmented_strict_train_set
python -m domain.kqapro.preprocess --goal augmented_strict_val_set
python -m domain.kqapro.preprocess --goal encoded_strict_train_set
python -m domain.kqapro.preprocess --goal encoded_strict_val_set
python -m domain.kqapro.preprocess --goal shuffled_augmented_strict_train_set
python -m domain.kqapro.preprocess --goal shuffled_encoded_strict_train_set
python -m domain.kqapro.preprocess --goal encoded_weaksup_pretraining_set
python -m domain.kqapro.preprocess --goal encoded_weaksup_search_set
#+end_src

** Training with logical forms
*** Training with the default options
#+begin_src sh
python -m domain.kqapro.run --config config.train_default
#+end_src

*** Training for multiple decoding strategies
#+begin_src sh
python -m domain.kqapro.run --config config.train_for_multiple_decoding_strategies
#+end_src

*** Training for multiple decoding strategies with a portion of the train set
#+begin_src sh
PERCENT=5  # between 0 to 100
python -m domain.kqapro.run --config config.train_for_multiple_decoding_strategies --additional-config config.additional.train_set_portion --train-set-percent $PERCENT
#+end_src

*** Training for multiple decoding strategies with a portion of the train set where inferencing_subtypes=False
#+begin_src sh
PERCENT=5  # between 0 to 100
python -m domain.kqapro.run --config config.train_for_multiple_decoding_strategies --additional-config config.additional.train_set_portion_no_inferencing_subtypes --train-set-percent $PERCENT
#+end_src

*** Training for multiple decoding strategies with batch_size=128
#+begin_src sh
python -m domain.kqapro.run --config config.train_for_multiple_decoding_strategies --additional-config config.batch.size=128
#+end_src

** Training with denotations
*** Learning from strong supervision with a small subset of dataset
**** Configuration
#+begin_src sh
SS_MODEL_LEARNING_DIR_PATH=./model-instance/strongly-supervised-models
#+end_src

**** Training with a small subset of the trainin set
#+begin_src sh
python -m domain.kqapro.run --config config.train_for_multiple_decoding_strategies \
       --model-learning-dir $SS_MODEL_LEARNING_DIR_PATH \
       --additional-config config.additional.weaksup_pretraining
#+end_src

*** Learning form weak supervision
**** Configuration for Multiple GPUs
#+begin_src sh
# 4 GPUs
export CUDA_VISIBLE_DEVICES=$(seq -s , 0 3)  # 0,1,2,3
NUM_GPUS=$(($(echo $CUDA_VISIBLE_DEVICES | tr -cd , | wc -c) + 1))  # 4
ACCELERATE_CONFIG="accelerate/${NUM_GPUS}gpus.yaml"
#+end_src

**** Configuration for a decoding method
***** Fully-constrained decoding
#+begin_src sh
DECODING=full-constraints
ADDITIONAL_OPTIONS=''
#+end_src

***** Without arg-candidate
#+begin_src sh
DECODING=no-arg-candidate
ADDITIONAL_OPTIONS='--additional-config config.additional.using_arg_candidate=False'
#+end_src

***** Without arg-candidate and without union types
#+begin_src sh
DECODING=no-ac-no-dut
ADDITIONAL_OPTIONS='--additional-config config.additional.using_arg_candidate=False|config.additional.using_distinctive_union_types=False'
#+end_src

***** Without any constrained decoding
#+begin_src sh
DECODING=no-constrained-decoding
ADDITIONAL_OPTIONS='--additional-config config.additional.constrained_decoding=False'
#+end_src

**** Training with question-answer pairs on 4 GPUs
#+begin_src sh
SS_MODEL_LEARNING_DIR_PATH=./model-instance/strongly-supervised-models
COMMON_WS_MODEL_LEARNING_DIR_PATH=./model-instance/weakly-supervised-models

PRETRAINED_MODEL_PATH=$SS_MODEL_LEARNING_DIR_PATH/$DECODING:best/model
WS_MODEL_LEARNING_DIR_PATH=$COMMON_WS_MODEL_LEARNING_DIR_PATH/$DECODING

accelerate launch --num_processes $NUM_GPUS --config_file $ACCELERATE_CONFIG \
           --main_process_port $(shuf -i 49152â€“65535 -n 1) \
           -m domain.kqapro.run --using-tqdm false \
           --config config.search_train \
           --model-learning-dir $WS_MODEL_LEARNING_DIR_PATH \
           --pretrained-model-path $PRETRAINED_MODEL_PATH \
           --resuming false \
           $ADDITIONAL_OPTIONS
#+end_src

** Testing
- Testing on the validation set make a prediction file and an evaluation result.
- Testing on the test set makes a prediction file without evaluation.

*** Testing on the validation set with the default model path
#+begin_src sh
MODEL_LEARNING_DIR_PATH='path/to/model/learning/dir'
# e.g. MODEL_LEARNING_DIR_PATH=model-instance/2023-07-15_10:10:24_916400
python -m domain.kqapro.run --config config.test_on_val_set --model-learning-dir $MODEL_LEARNING_DIR_PATH
#+end_src

*** Testing on the validation set with a specific model directory name
#+begin_src sh
MODEL_LEARNING_DIR_PATH='path/to/model/learning/dir'
# e.g. MODEL_LEARNING_DIR_PATH=model-instance/2023-07-15_10:10:24_916400
MODEL_DIR_NAME='full-constraints:best/model'
# Options for MODEL_DIR_NAME: best/model, common:best/model, full-constraints:best/model, no-arg-candidate:best/model, no-ac-no-dut:best/model, no-constrained-decoding:best/model
python -m domain.kqapro.run --config config.test_on_val_set --model-learning-dir $MODEL_LEARNING_DIR_PATH --model-dir-name $MODEL_DIR_NAME
#+end_src

*** Testing on the test set with the default model path
#+begin_src sh
MODEL_LEARNING_DIR_PATH='path/to/model/learning/dir'
# e.g. MODEL_LEARNING_DIR_PATH=model-instance/2023-07-15_10:10:24_916400
python -m domain.kqapro.run --config config.test_on_test_set --model-learning-dir $MODEL_LEARNING_DIR_PATH
#+end_src

*** Testing with specifying a model path and test directory path
#+begin_src sh
TEST_CONFIG='config.test_on_test_set'  # or 'config.test_on_val_set'
MODEL_PATH='path/to/model'
TEST_DIR_PATH='path/to/test-result'
# e.g. TEST_DIR_PATH='./model-test/2023-07-19_01:17:04_094104_full-constraints:best/model'

python -m domain.kqapro.run --config $TEST_CONFIG --model-path $MODEL_PATH --test-dir $TEST_DIR_PATH
#+end_src

*** Testing with a specific decoding strategy
#+begin_src sh
TEST_CONFIG='config.test_on_test_set'  # or 'config.test_on_val_set'
MODEL_PATH='path/to/model'
COMMON_TEST_CMD="python -m domain.kqapro.run --config config.$TEST_CONFIG --model-path $MODEL_PATH"

# full constraints
TEST_DIR_PATH='path/to/test-result:full-constraints'
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH

# without arg-candidate
TEST_DIR_PATH='path/to/test-result:no-arg-candidate'
ADDITIONAL_CONFIG='config.additional.using_arg_candidate=False'
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG

# without constrained-decoding
TEST_DIR_PATH='path/to/test-result:no-constrained-decoding'
ADDITIONAL_CONFIG='config.additional.constrained_decoding=False'
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG
#+end_src

*** Testing with disabling arg-candidate for an action
#+begin_src sh
TEST_CONFIG='config.test_on_val_set'  # or 'config.test_on_test_set'
MODEL_PATH='path/to/model'
TEST_DIR_PATH='path/to/test-result'
# e.g. TEST_DIR_PATH='./model-test/2023-07-19_01:17:04_094104_full-constraints:best/model'
ACTION_NAME=keyword-concept     # or keyword-entity, keyword-relation, ...

python -m domain.kqapro.run --config $TEST_CONFIG --model-path $MODEL_PATH --test-dir $TEST_DIR_PATH --additional-config config.additional.no_arg_candidate --no-arg-candidate-for $ACTION_NAME
#+end_src

*** Testing with oracle on the validation set
#+begin_src sh
TEST_CONFIG='config.oracle_test_on_val_set'
MODEL_PATH='path/to/model'
COMMON_TEST_CMD="python -m domain.kqapro.run --config config.$TEST_CONFIG --model-path $MODEL_PATH"

BEAM_CONFIG='config.additional.num_prediction_beams=4'

# full constraints
TEST_DIR_PATH='path/to/test-result:full-constraints'
ADDITIONAL_CONFIG="${BEAM_CONFIG}"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG

# without arg-candidate
TEST_DIR_PATH='path/to/test-result:no-arg-candidate'
ADDITIONAL_CONFIG="${BEAM_CONFIG}|config.additional.using_arg_candidate=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG

# without arg-candidate and union types
TEST_DIR_PATH='path/to/test-result:no-arg-candidate'
ADDITIONAL_CONFIG="${BEAM_CONFIG}|config.additional.using_arg_candidate=False|config.additional.using_distinctive_union_types=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG

# without constrained-decoding
TEST_DIR_PATH='path/to/test-result:no-constrained-decoding'
ADDITIONAL_CONFIG="${BEAM_CONFIG}|config.additional.constrained_decoding=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --additional-config $ADDITIONAL_CONFIG
#+end_src

** Evaluation with the official code
The evaluation code is slightly modified from [[https://github.com/shijx12/KQAPro_Baselines/blob/7cea2738fd095a2c17594d492923ee80a212ac0f/evaluate.py][KQAPro_Baselines/evaluate.py]].
The evaluation code requires a prediction file, which is the output from the previous steps.

#+begin_src sh
TRAIN_DATA_SET_PATH='path/to/train/data/set.json'
TEST_DATA_SET_PATH='path/to/test/data/set.json'
PREDICTION_FILE_PATH='path/to/predictions.txt'
python -m kqapro.evaluate --train $TRAIN_DATA_SET_PATH --test $TEST_DATA_SET_PATH --pred $PREDICTION_FILE_PATH
#+end_src

*** Example: evaluation on the validation set with the official code
#+begin_src sh
TRAIN_DATA_SET_PATH='./dataset/kqapro/train.json'
TEST_DATA_SET_PATH='./dataset/kqapro/val.json'
TEST_DIR_NAME='YOUR-TEST-DIRECTORY-NAME'
# e.g. TEST_DIR_NAME=2023-07-15_10:10:24_916400#0
PREDICTION_FILE_PATH="./model-test/$TEST_DIR_NAME/predictions.txt"
python -m kqapro.evaluate --train $TRAIN_DATA_SET_PATH --test $TEST_DATA_SET_PATH --pred $PREDICTION_FILE_PATH
#+end_src

* Acknowledgements
We thank to the authors of [[https://github.com/shijx12/][KQA Pro]] dataset. Our code also exploits the [[https://github.com/shijx12/KQAPro_Baselines][BART seq2seq program parser]] they released.
