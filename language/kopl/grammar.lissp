;;; -*- mode: lisp -*-

;; Examples
;;
;; (define-action
;;   :name 'and
;;   :act-type 'bool
;;   :param-types '(bool bool bool)
;;   :expr-dict (mapkv :default $(and-func {0} {1} {2})
;;                    :visual $(and {0} {1} {2}))
;;   :optional-idx None
;;   :rest-idx 2)
;;
;; (define-action
;;   :name 'or
;;   :act-type 'bool
;;   :param-types '(bool bool bool)
;;   :expr-dict (mapkv :default $(or-func {0} {1} {2})
;;                    :visual $(or {0} {1} {2}))
;;   :optional-idx None
;;   :rest-idx 2)

(define-types
  '(:type                             ; abstract
    (:obj-entity
     (:obj-entity-with-fact
      obj-entity-with-attr
      obj-entity-with-rel))

    (:keyword                           ; abstract
     kw-concept
     kw-entity
     kw-relation
     (:kw-attribute
      kw-attr-string
      (:kw-attr-comparable
       kw-attr-number
       (:kw-attr-time
        kw-attr-date                     ; NOT USED
        kw-attr-year                     ; NOT USED
        )))
     (:kw-qualifier
      kw-q-string
      kw-q-number
      (:kw-q-time
       kw-q-date                        ; NOT USED
       kw-q-year                        ; NOT USED
       )))

    (:operator                          ; abstract
     op-direction
     op-comparison
     op-st-or-bt
     op-min-or-max)

    (:value
     v-string
     v-number
     v-quantity
     v-unit
     (:v-time                           ; abstract
      v-date
      v-year))))

(define-types
  '(:part
    (:keyword-part                      ; abstract
     kp-concept
     kp-entity
     kp-relation
     (:kp-attribute                     ; abstract
      kp-attr-string
      kp-attr-number
      (:kp-attr-time
       kp-attr-date                     ; NOT USED
       kp-attr-year                     ; NOT USED
       ))
     (:kp-qualifier                     ; abstract
      kp-q-string
      kp-q-number
      (:kp-q-time
       kp-q-date                        ; NOT USED
       kp-q-year                        ; NOT USED
       )))

    (:value-part
     vp-string
     vp-quantity
     vp-unit
     (:vp-time                          ; abstract
      vp-date
      vp-year))))

(define-types
  '(:result
    result-entity-name
    result-number
    result-relation
    result-attr-value
    result-attr-q-value
    result-rel-q-value
    result-boolean))

(declare-abstract-types
  '(type
    keyword
    operator
    v-time
    keyword-part
    kp-attribute
    kp-qualifier
    vp-time))


;; Result functions
;; 'Count',
;; 'QueryAttr',
;; 'QueryAttrQualifier',
;; 'QueryRelation',
;; 'QueryRelationQualifier',
;; 'SelectAmong',
;; 'SelectBetween',
;; 'VerifyDate',
;; 'VerifyNum',
;; 'VerifyStr',
;; 'VerifyYear',
;; QueryName ('What')


(define-action
  :name 'program
  :act-type 'result
  :param-types '(result)
  :expr-dict (mapkv :default $(lambda (engine)
                                (postprocess-denotation {0}))
                    :visual-0 "{0}"
                    :visual $(program {0}))
  :starting True)

(define-action
  :name 'all-entities
  :act-type 'obj-entity
  :param-types '()
  :expr-dict (mapkv :default $(engine.FindAll)
                    :visual "all-entities"))

(define-action
  :name 'find
  :act-type 'obj-entity
  :param-types '(kw-entity)
  :expr-dict (mapkv :default $(engine.Find {0})
                    :visual $(find {0})))

;;; filter-*

(define-action
  :name 'filter-concept
  :act-type 'obj-entity
  :param-types '(kw-concept obj-entity)
  :expr-dict (mapkv :default $(engine.FilterConcept {1} {0})
                    :visual $(filter-concept {1} {0})))

(define-action
  :name 'filter-str
  :act-type 'obj-entity-with-attr
  :param-types '(kw-attr-string v-string obj-entity)
  :expr-dict (mapkv :default $(engine.FilterStr {2} {0} {1})
                    :visual $(filter-str {2} {0} {1})))

(define-action
  :name 'filter-number
  :act-type 'obj-entity-with-attr
  :param-types '(kw-attr-number v-number op-comparison obj-entity)
  :expr-dict (mapkv :default $(engine.FilterNum {3} {0} {1} {2})
                    :visual $(filter-number {3} {0} {1} {2})))

(define-action
  :name 'filter-year
  :act-type 'obj-entity-with-attr
  :param-types '(kw-attr-time v-year op-comparison obj-entity)
  :expr-dict (mapkv :default $(engine.FilterYear {3} {0} {1} {2})
                    :visual $(filter-year {3} {0} {1} {2})))

(define-action
  :name 'filter-date
  :act-type 'obj-entity-with-attr
  :param-types '(kw-attr-time v-date op-comparison obj-entity)
  :expr-dict (mapkv :default $(engine.FilterDate {3} {0} {1} {2})
                    :visual $(filter-date {3} {0} {1} {2})))

;;; relate

(define-action
  :name 'relate
  :act-type 'obj-entity-with-rel
  :param-types '(kw-relation op-direction obj-entity)
  :expr-dict (mapkv :default $(engine.Relate {2} {0} {1})
                    :visual $(relate {2} {0} {1})))

;;; op-*

(define-action
  :name 'op-eq
  :act-type 'op-comparison
  :param-types '()
  :expr-dict (mapkv :default $(repr "=")
                    :visual "="))

(define-action
  :name 'op-ne
  :act-type 'op-comparison
  :param-types '()
  :expr-dict (mapkv :default $(repr "!=")
                    :visual "!="))

(define-action
  :name 'op-lt
  :act-type 'op-comparison
  :param-types '()
  :expr-dict (mapkv :default $(repr "<")
                    :visual "<"))

(define-action
  :name 'op-gt
  :act-type 'op-comparison
  :param-types '()
  :expr-dict (mapkv :default $(repr ">")
                    :visual ">"))

;;; direction-*

(define-action
  :name 'direction-forward
  :act-type 'op-direction
  :param-types '()
  :expr-dict (mapkv :default $(repr "forward")
                    :visual "'forward"))

(define-action
  :name 'direction-backward
  :act-type 'op-direction
  :param-types '()
  :expr-dict (mapkv :default $(repr "backward")
                    :visual "'backward"))

;;; q-filter-*

(define-action
  :name 'q-filter-str
  :act-type 'obj-entity-with-fact
  :param-types '(kw-q-string v-string obj-entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterStr {2} {0} {1})
                    :visual $(q-filter-str {2} {0} {1})))

(define-action
  :name 'q-filter-number
  :act-type 'obj-entity-with-fact
  :param-types '(kw-q-number v-number op-comparison obj-entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterNum {3} {0} {1} {2})
                    :visual $(q-filter-number {3} {0} {1} {2})))

(define-action
  :name 'q-filter-year
  :act-type 'obj-entity-with-fact
  :param-types '(kw-q-time v-year op-comparison obj-entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterYear {3} {0} {1} {2})
                    :visual $(q-filter-year {3} {0} {1} {2})))

(define-action
  :name 'q-filter-date
  :act-type 'obj-entity-with-fact
  :param-types '(kw-q-time v-date op-comparison obj-entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterDate {3} {0} {1} {2})
                    :visual $(q-filter-date {3} {0} {1} {2})))

;;; intersect / union

(define-action
  :name 'intersect
  :act-type 'obj-entity
  :param-types '(obj-entity obj-entity)
  :expr-dict (mapkv :default $(engine.And {0} {1})
                    :visual $(intersect {0} {1})))

(define-action
  :name 'union
  :act-type 'obj-entity
  :param-types '(obj-entity obj-entity)
  :expr-dict (mapkv :default $(engine.Or {0} {1})
                    :visual $(union {0} {1})))

;;; count

(define-action
  :name 'count
  :act-type 'result-number
  :param-types '(obj-entity)
  :expr-dict (mapkv :default $(engine.Count {0})
                    :visual $(count {0})))

;;; select-*

(define-action
  :name 'select-between
  :act-type 'result-entity-name
  :param-types '(kw-attr-comparable op-st-or-bt obj-entity obj-entity)
  :expr-dict (mapkv :default $(engine.SelectBetween {2} {3} {0} {1})
                    :visual $(select-between {2} {3} {0} {1})))

(define-action
  :name 'select-among
  :act-type 'result-entity-name
  :param-types '(kw-attr-comparable op-min-or-max obj-entity)
  :expr-dict (mapkv :default $(engine.SelectAmong {2} {0} {1})
                    :visual $(select-between {2} {0} {1})))

;;; op-*

(define-action
  :name 'op-st
  :act-type 'op-st-or-bt
  :param-types '()
  :expr-dict (mapkv :default $(repr "smaller")
                    :visual "'smaller"))

(define-action
  :name 'op-bt
  :act-type 'op-st-or-bt
  :param-types '()
  :expr-dict (mapkv :default $(repr "greater")
                    :visual "'greater"))

(define-action
  :name 'op-min
  :act-type 'op-min-or-max
  :param-types '()
  :expr-dict (mapkv :default $(repr "min")
                    :visual "'min"))

(define-action
  :name 'op-max
  :act-type 'op-min-or-max
  :param-types '()
  :expr-dict (mapkv :default $(repr "max")
                    :visual "'max"))

;;; query-*

(define-action
  :name 'query-name
  :act-type 'result-entity-name
  :param-types '(obj-entity)
  :expr-dict (mapkv :default $(engine.QueryName {0})
                    :visual $(query-name {0})))

(define-action
  :name 'query-attr
  :act-type 'result-attr-value
  :param-types '(kw-attribute obj-entity)
  :expr-dict (mapkv :default $(engine.QueryAttr {1} {0})
                    :visual $(query-attr {0} {1})))

(define-action
  :name 'query-attr-under-cond
  :act-type 'result-attr-value
  :param-types '(kw-attribute kw-qualifier value obj-entity)
  :expr-dict (mapkv :default $(engine.QueryAttrUnderCondition {3} {0} {1} {2})
                    :visual $(query-attr-under-cond {3} {0} {1} {2})))

(define-action
  :name 'query-relation
  :act-type 'result-relation
  :param-types '(obj-entity obj-entity)
  :expr-dict (mapkv :default $(engine.QueryRelation {0} {1})
                    :visual $(query-relation {0} {1})))

(define-action
  :name 'query-attr-qualifier
  :act-type 'result-attr-q-value
  :param-types '(kw-attribute value kw-qualifier obj-entity)
  :expr-dict (mapkv :default $(engine.QueryAttrQualifier {3} {0} {1} {2})
                    :visual $(query-attr-qualifier {3} {0} {1} {2})))

(define-action
  :name 'query-rel-qualifier
  :act-type 'result-rel-q-value
  :param-types '(kw-relation kw-qualifier obj-entity obj-entity)
  :expr-dict (mapkv :default $(engine.QueryRelationQualifier {2} {3} {0} {1})
                    :visual $(query-rel-qualifier {2} {3} {0} {1})))

;;; verify-*

(define-action
  :name 'verify-str
  :act-type 'result-boolean
  :param-types '(v-string result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyStr {1} {0})
                    :visual $(verify-str {1} {0})))

(define-action
  :name 'verify-number
  :act-type 'result-boolean
  :param-types '(v-number op-comparison result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyNum {2} {0} {1})
                    :visual $(verify-number {2} {0} {1})))

(define-action
  :name 'verify-year
  :act-type 'result-boolean
  :param-types '(v-year op-comparison result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyYear {2} {0} {1})
                    :visual $(verify-year {2} {0} {1})))

(define-action
  :name 'verify-date
  :act-type 'result-boolean
  :param-types '(v-date op-comparison result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyDate {2} {0} {1})
                    :visual $(verify-date {2} {0} {1})))

(let ((concat-tokens (retrieve '(function concat-tokens)))
      (concat-parts (retrieve '(function concat-parts)))
      (concat-quantity-unit (retrieve '(function concat-quantity-unit))))
  ;; keyword-*
  (starloop
   (lambda (name act-type param-type)
     (define-action
       :name name
       :act-type act-type
       ;; :param-types (entuple param-type '&rest param-type)
       :param-types `(,param-type &rest ,param-type)
       :arg-candidate (retrieve `(candidate ,act-type))
       :expr-dict (mapkv :default concat-parts)))
   '((keyword-concept           kw-concept      kp-concept    )
     (keyword-entity            kw-entity       kp-entity     )
     (keyword-relation          kw-relation     kp-relation   )
     (keyword-attribute-string  kw-attr-string  kp-attr-string)
     (keyword-attribute-number  kw-attr-number  kp-attr-number)
     (keyword-attribute-time    kw-attr-time    kp-attr-time  )
     (keyword-qualifier-string  kw-q-string     kp-q-string   )
     (keyword-qualifier-number  kw-q-number     kp-q-number   )
     (keyword-qualifier-time    kw-q-time       kp-q-time     )
     ;; (keyword-attribute-date   kw-attr-date   kp-attr-date)
     ;; (keyword-attribute-year   kw-attr-year   kp-attr-year)
     ;; (keyword-qualifier-date   kw-q-date   kp-q-date)
     ;; (keyword-qualifier-year   kw-q-year   kp-q-year)
     ))

  ;; constant-*
  (starloop
   (lambda (name act-type param-type)
     (define-action
       :name name
       :act-type act-type
       ;; :param-types (entuple vp-string '&rest vp-string)
       :param-types `(,param-type &rest ,param-type)
       :arg-filter (if-else (= act-type 'v-string)
                            None
                            (retrieve `(filter ,act-type)))
       :expr-dict (mapkv :default (if-else (= name 'constant-quantity) concat-tokens concat-parts))))
   '((constant-string    v-string    vp-string  )
     (constant-quantity  v-quantity  vp-quantity)
     (constant-date      v-date      vp-date    )
     (constant-year      v-year      vp-year    )))

  (define-action
    :name 'constant-number
    :act-type 'v-number
    :param-types '(v-quantity v-unit)
    :expr-dict (mapkv :default concat-quantity-unit))

  (define-action
    :name 'constant-unit
    :act-type 'v-unit
    :param-types '(&rest vp-unit)
    :arg-candidate (retrieve '(candidate v-unit))
    :expr-dict (mapkv :default concat-tokens)))


;;; token-*

(define-meta-action
  :meta-name 'nl-token
  :meta-params '(token)
  :name-fn (retrieve '(name nl-token))
  :expr-dict-fn (lambda (token)
                  (mapkv :default token))
  :param-types '())

;; (define-meta-action
;;   :meta-name 'token-string
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'vp-string
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-quantity
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'vp-quantity
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-unit
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'vp-unit
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-date
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'vp-date
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-year
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'vp-year
;;   :param-types '())
