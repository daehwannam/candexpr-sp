
* Base directory
All commands should be run in the project root.

#+begin_src sh
if [ ! -d '.git' ] || [ ! -d '.submodules' ] || [ ! -d 'domain' ]; then
    echo 'The current directory is NOT the project root.'
fi
#+end_src

* Setup
** Dataset and executtion environment
#+begin_src sh
DOWNLOAD_PATH=../download
DATA_PATH=../data

DATA_LINK=https://worksheets.codalab.org/rest/bundles/0x34b628718e514100aa75731bbdef457f/contents/blob/
EVALUATOR_LINK=https://worksheets.codalab.org/rest/bundles/0x05625395eb1243ce9c2c75849a87f906/contents/blob/

wget $DATA_LINK -O $DOWNLOAD_PATH/overnight_data.tar.gz
wget $EVALUATOR_LINK -O $DOWNLOAD_PATH/overnight_evaluator.tar.gz  # The original name is "evaluator.tar.gz". Its size is 728M.

mkdir $DATA_PATH/overnight
tar -xf $DOWNLOAD_PATH/overnight_data.tar.gz -C $DATA_PATH/overnight
tar -xf $DOWNLOAD_PATH/overnight_evaluator.tar.gz -C $DATA_PATH/overnight

mkdir -p ./dataset
ln -s $(realpath $DATA_PATH/overnight/data/overnight/data) ./dataset/overnight
ln -s $(realpath $DATA_PATH/overnight/data/overnight/evaluator) ./overnight/evaluator

ln -s $DATA_PATH/overnight/data/overnight/evaluator/sempre/module-classes.txt .
# edu.stanford.nlp.sempre.Master.getOptionsParser requires the 'module-classes.txt' file

#+end_src

The setup code is borrowed from:
- [[https://github.com/rhythmcao/semantic-parsing-dual][pull_dependency.sh]]
- [[https://github.com/Flitternie/GraphQ_IR][pull_dependency_overnight.sh]]

** Code reference
#+begin_src sh
git clone https://github.com/percyliang/sempre.git
#+end_src

** Java installation (optional)
#+begin_src sh
conda install -c conda-forge openjdk
#+end_src

* Running
** Preprocessing
#+begin_src sh
set -e
python -m domain.overnight.preprocess --goal augmented_train_set
python -m domain.overnight.preprocess --goal augmented_test_set
python -m domain.overnight.preprocess --goal encoded_train_set
python -m domain.overnight.preprocess --goal encoded_test_set
python -m domain.overnight.preprocess --goal shuffled_encoded_train_set
#+end_src

** Specifying a domain
#+begin_src sh
DOMAIN=overnight
#+end_src

** Training with logical forms
*** Training on a single sub-domain for multiple decoding strategies
#+begin_src sh
SINGLE_DOMAIN='calendar'
# valid sub-domains: 'calendar', 'blocks', 'housing', 'restaurants', 'publications', 'recipes', 'socialnetwork', 'basketball'
python -m run --domain ${DOMAIN} --config config.${DOMAIN}.train_for_multiple_decoding_strategies --single-domain $SINGLE_DOMAIN
#+end_src

*** Training on all sub-domains except one sub-domain for multiple decoding strategies
#+begin_src sh
UNUSED_DOMAIN='calendar'
# valid sub-domains: 'calendar', 'blocks', 'housing', 'restaurants', 'publications', 'recipes', 'socialnetwork', 'basketball'
python -m run --domain ${DOMAIN} --config config.${DOMAIN}.train_for_multiple_decoding_strategies --unused-domain $UNUSED_DOMAIN
#+end_src

** Testing
*** Testing on a single sub-domain
#+begin_src sh
TEST_CONFIG="config.${DOMAIN}.test_on_test_set"  # or "config.${DOMAIN}.test_on_val_set"
SINGLE_DOMAIN='calendar'
# valid domains: 'calendar', 'blocks', 'housing', 'restaurants', 'publications', 'recipes', 'socialnetwork', 'basketball'
MODEL_PATH='path/to/model'
TEST_DIR_PATH="model-test/${DOMAIN}/result"
# e.g. TEST_DIR_PATH="./model-test/${DOMAIN}/2023-07-19_01:17:04_094104_full-constraints:best/model"

python -m run --domain ${DOMAIN} --config $TEST_CONFIG --single-domain $SINGLE_DOMAIN --model-path $MODEL_PATH --test-dir $TEST_DIR_PATH
#+end_src

*** Testing on a single sub-domain with a specific decoding strategy
#+begin_src sh
TEST_CONFIG="config.${DOMAIN}.test_on_test_set"  # or "config.${DOMAIN}.test_on_val_set"
SINGLE_DOMAIN='calendar'
# valid domains: 'calendar', 'blocks', 'housing', 'restaurants', 'publications', 'recipes', 'socialnetwork', 'basketball'
MODEL_PATH='path/to/model'
COMMON_TEST_CMD="python -m run --domain ${DOMAIN} --config $TEST_CONFIG --single-domain $SINGLE_DOMAIN --model-path $MODEL_PATH"

BEAM_CONFIG='config.common.extra.num_prediction_beams=1'

# full constraints
TEST_DIR_PATH="model-test/${DOMAIN}/result:full-constraints"
EXTRA_CONFIG="${BEAM_CONFIG}"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --extra-config $EXTRA_CONFIG

# without arg-candidate
TEST_DIR_PATH="model-test/${DOMAIN}/result:no-arg-candidate"
EXTRA_CONFIG="${BEAM_CONFIG}|config.common.extra.using_arg_candidate=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --extra-config $EXTRA_CONFIG

# without arg-candidate and union types
TEST_DIR_PATH="model-test/${DOMAIN}/result:no-ac-no-dut"
EXTRA_CONFIG="${BEAM_CONFIG}|config.common.extra.using_arg_candidate=False|config.common.extra.using_distinctive_union_types=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --extra-config $EXTRA_CONFIG

# without constrained-decoding
TEST_DIR_PATH="model-test/${DOMAIN}/result:no-constrained-decoding"
EXTRA_CONFIG="${BEAM_CONFIG}|config.common.extra.constrained_decoding=False"
$COMMON_TEST_CMD --test-dir $TEST_DIR_PATH --extra-config $EXTRA_CONFIG
#+end_src
