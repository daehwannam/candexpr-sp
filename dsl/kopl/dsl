;;; -*- mode: lisp -*-

;; Examples
;;
;; (define-action
;;   :name 'and
;;   :act-type 'bool
;;   :param-types '(bool bool bool)
;;   :expr-dict (mapkv :default $(and-func @0 @1 @2)
;;                    :visual $(and @0 @1 @2))
;;   :optional-idx None
;;   :rest-idx 2)
;;
;; (define-action
;;   :name 'or
;;   :act-type 'bool
;;   :param-types '(bool bool bool)
;;   :expr-dict (mapkv :default $(or-func @0 @1 @2)
;;                    :visual $(or @0 @1 @2))
;;   :optional-idx None
;;   :rest-idx 2)

(define-types
  '(:object
    (:entity-object
     (:entity-with-fact
      entity-with-attr
      entity-with-rel))

    (:keyword
     concept
     entity
     relation
     direction
     (:attribute
      attribute-string
      attribute-number
      (:attribute-time
       attribute-date                    ; not used
       attribute-year                    ; not used
       ))
     (:qualifier
      qualifier-string
      qualifier-number
      (:qualifier-time
       qualifier-date                    ; not used
       qualifier-year                    ; not used
       )))

    (:operator
     comp-operator
     st-or-bt-operator
     min-or-max-operator)

    (:value
     value-string
     value-number
     value-quantity
     value-unit
     (:value-time
      value-date
      value-year))))

(define-types
  '(:object
    (:key-part
     key-part-entity
     key-part-relation
     key-part-attribute-string
     key-part-attribute-number
     (:key-part-attribute-time
      key-part-attribute-date
      key-part-attribute-year)
     key-part-qualifier-string
     key-part-qualifier-number
     (:key-part-qualifier-time
      key-part-qualifier-date
      key-part-qualifier-year))

    (:value-part
     value-part-string
     value-part-quantity
     value-part-unit
     (:value-part-time
      value-part-date
      value-part-year))))

(define-types
  '(:result
    result-entity-name
    result-number
    result-relation
    result-attr-value
    result-attr-q-value
    result-rel-q-value
    result-boolean))


;; Result functions
;; 'Count',
;; 'QueryAttr',
;; 'QueryAttrQualifier',
;; 'QueryRelation',
;; 'QueryRelationQualifier',
;; 'SelectAmong',
;; 'SelectBetween',
;; 'VerifyDate',
;; 'VerifyNum',
;; 'VerifyStr',
;; 'VerifyYear',
;; QueryName ('What')


(define-action
  :name 'program
  :act-type 'result
  :param-types '(result)
  :expr-dict (mapkv :default $(lambda (engine)
                                 (postprocess-denotation @0))
                    :visual-0 "@0"
                    :visual $(program @0)))

(define-action
  :name 'all-entities
  :act-type 'entity-object
  :param-types '()
  :expr-dict (mapkv :default $(engine.FindAll)
                    :visual "all-entities"))

(define-action
  :name 'find
  :act-type 'entity-object
  :param-types '(entity)
  :expr-dict (mapkv :default $(engine.Find @0)
                    :visual $(find @0)))

;;; filter-*

(define-action
  :name 'filter-concept
  :act-type 'entity-object
  :param-types '(concept entity-object)
  :expr-dict (mapkv :default $(engine.FilterConcept @0)
                    :visual $(filter-concept @0)))

(define-action
  :name 'filter-str
  :act-type 'entity-with-attr
  :param-types '(attribute-string value-string entity-object)
  :expr-dict (mapkv :default $(engine.FilterStr @2 @0 @1)
                    :visual $(filter-str @0 @1 @2)))

(define-action
  :name 'filter-number
  :act-type 'entity-with-attr
  :param-types '(attribute-number value-number comp-operator entity-object)
  :expr-dict (mapkv :default $(engine.FilterNum @3 @0 @1 @2)
                    :visual $(filter-number @0 @1 @2 @3)))

(define-action
  :name 'filter-year
  :act-type 'entity-with-attr
  :param-types '(attribute-time value-year comp-operator entity-object)
  :expr-dict (mapkv :default $(engine.FilterYear @3 @0 @1 @2)
                    :visual $(filter-year @0 @1 @2 @3)))

(define-action
  :name 'filter-date
  :act-type 'entity-with-attr
  :param-types '(attribute-time value-date comp-operator entity-object)
  :expr-dict (mapkv :default $(engine.FilterDate @3 @0 @1 @2)
                    :visual $(filter-date @0 @1 @2 @3)))

;;; relate

(define-action
  :name 'relate
  :act-type 'entity-with-rel
  :param-types '(relation direction entity-object)
  :expr-dict (mapkv :default $(engine.Relate @2 @0 @1)
                    :visual $(relate @0 @1 @2)))

;;; op-*

(define-action
  :name 'op-eq
  :act-type 'comp-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"=\""
                    :visual "="))

(define-action
  :name 'op-ne
  :act-type 'comp-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"!=\""
                    :visual "!="))

(define-action
  :name 'op-lt
  :act-type 'comp-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"<\""
                    :visual "<"))

(define-action
  :name 'op-gt
  :act-type 'comp-operator
  :param-types '()
  :expr-dict (mapkv :default #"\">\""
                    :visual ">"))

;;; direction-*

(define-action
  :name 'direction-forward
  :act-type 'direction
  :param-types '()
  :expr-dict (mapkv :default #"\"forward\""
                    :visual "'forward"))

(define-action
  :name 'direction-backward
  :act-type 'direction
  :param-types '()
  :expr-dict (mapkv :default #"\"backward\""
                    :visual "'backward"))

;;; q-filter-*

(define-action
  :name 'q-filter-str
  :act-type 'entity-with-fact
  :param-types '(qualifier-string value-string entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterStr @2 @0 @1)
                    :visual $(q-filter-str @0 @1 @2)))

(define-action
  :name 'q-filter-number
  :act-type 'entity-with-fact
  :param-types '(qualifier-number value-number comp-operator entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterNum @3 @0 @1 @2)
                    :visual $(q-filter-number @0 @1 @2 @3)))

(define-action
  :name 'q-filter-year
  :act-type 'entity-with-fact
  :param-types '(qualifier-time value-year comp-operator entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterYear @3 @0 @1 @2)
                    :visual $(q-filter-year @0 @1 @2 @3)))

(define-action
  :name 'q-filter-date
  :act-type 'entity-with-fact
  :param-types '(qualifier-time value-date comp-operator entity-with-fact)
  :expr-dict (mapkv :default $(engine.QFilterDate @3 @0 @1 @2)
                    :visual $(q-filter-date @0 @1 @2 @3)))

;;; intersect / union

(define-action
  :name 'intersect
  :act-type 'entity-object
  :param-types '(entity-object entity-object)
  :expr-dict (mapkv :default $(engine.And @0 @1)
                    :visual $(intersect @0 @1)))

(define-action
  :name 'union
  :act-type 'entity-object
  :param-types '(entity-object entity-object)
  :expr-dict (mapkv :default $(engine.Or @0 @1)
                    :visual $(union @0 @1)))

;;; count

(define-action
  :name 'count
  :act-type 'result-number
  :param-types '(entity-object)
  :expr-dict (mapkv :default $(engine.Count @0)
                    :visual $(count @0)))

;;; select-*

(define-action
  :name 'select-between
  :act-type 'result-entity-name
  :param-types '(attribute st-or-bt-operator entity-object entity-object)
  :expr-dict (mapkv :default $(engine.SelectBetween @2 @3 @0 @1)
                    :visual $(select-between @0 @1 @2 @3)))

(define-action
  :name 'select-among
  :act-type 'result-entity-name
  :param-types '(attribute min-or-max-operator entity-object)
  :expr-dict (mapkv :default $(engine.SelectBetween @2 @0 @1)
                    :visual $(select-between @0 @1 @2)))

;;; op-*

(define-action
  :name 'op-st
  :act-type 'st-or-bt-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"smaller\""
                    :visual "'smaller"))

(define-action
  :name 'op-gt
  :act-type 'st-or-bt-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"greater\""
                    :visual "'greater"))

(define-action
  :name 'op-min
  :act-type 'min-or-max-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"min\""
                    :visual "'min"))

(define-action
  :name 'op-max
  :act-type 'min-or-max-operator
  :param-types '()
  :expr-dict (mapkv :default #"\"max\""
                    :visual "'max"))

;;; query-*

(define-action
  :name 'query-name
  :act-type 'result-entity-name
  :param-types '(entity-object)
  :expr-dict (mapkv :default $(engine.QueryName @0)
                    :visual $(query-name @0)))

(define-action
  :name 'query-attr
  :act-type 'result-attr-value
  :param-types '(attribute entity-object)
  :expr-dict (mapkv :default $(engine.QueryAttr @1 @0)
                    :visual $(query-attr @0 @1)))

(define-action
  :name 'query-attr-under-cond
  :act-type 'result-attr-value
  :param-types '(attribute qualifier value entity-object)
  :expr-dict (mapkv :default $(engine.QueryAttrUnderCondition @3 @0 @1 @2)
                    :visual $(query-attr-under-cond @0 @1 @2 @3)))

(define-action
  :name 'query-relation
  :act-type 'result-relation
  :param-types '(entity-object entity-object)
  :expr-dict (mapkv :default $(engine.QueryRelation @0 @1)
                    :visual $(query-relation @0 @1)))

(define-action
  :name 'query-attr-qualifier
  :act-type 'result-attr-q-value
  :param-types '(attribute value qualifier entity-object)
  :expr-dict (mapkv :default $(engine.QueryAttrQualifier @3 @0 @1 @2)
                    :visual $(query-attr-qualifier @0 @1 @2 @3)))

(define-action
  :name 'query-rel-qualifier
  :act-type 'result-rel-q-value
  :param-types '(relation qualifier entity-object entity-object)
  :expr-dict (mapkv :default $(engine.QueryRelationQualifier @2 @3 @0 @1)
                    :visual $(query-rel-qualifier @0 @1 @2 @3)))

;;; verify-*

(define-action
  :name 'verify-str
  :act-type 'result-boolean
  :param-types '(value-string result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyStr @1 @0)
                    :visual $(verify-str @0 @1)))

(define-action
  :name 'verify-number
  :act-type 'result-boolean
  :param-types '(value-number comp-operator result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyNum @2 @0 @1)
                    :visual $(verify-number @0 @1 @2)))

(define-action
  :name 'verify-year
  :act-type 'result-boolean
  :param-types '(value-year comp-operator result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyYear @2 @0 @1)
                    :visual $(verify-year @0 @1 @2)))

(define-action
  :name 'verify-date
  :act-type 'result-boolean
  :param-types '(value-date comp-operator result-attr-value)
  :expr-dict (mapkv :default $(engine.VerifyDate @2 @0 @1)
                    :visual $(verify-date @0 @1 @2)))

;;; keyword-*

(starmaps
 (lambda (name act-type param-type)
   (define-action
     :name name
     :act-type act-type
     :param-types (entuple param-type '&rest param-type)
     :expr-dict (mapkv :default #(.format #"\"{}\"" (.lstrip (.replace (.join "" @:) "Ġ" " "))))))
 '((keyword-entity-name      entity           key-part-entity)
   (keyword-relation         relation         key-part-relation)
   (keyword-attribute-string attribute-string key-part-attribute-string)
   (keyword-attribute-number attribute-number key-part-attribute-number)
   (keyword-attribute-time   attribute-time   key-part-attribute-time)
   ;; (keyword-attribute-date   attribute-date   key-part-attribute-date)
   ;; (keyword-attribute-year   attribute-year   key-part-attribute-year)
   (keyword-qualifier-string qualifier-string key-part-qualifier-string)
   (keyword-qualifier-number qualifier-number key-part-qualifier-number)
   (keyword-qualifier-time   qualifier-time   key-part-qualifier-time)
   ;; (keyword-qualifier-date   qualifier-date   key-part-qualifier-date)
   ;; (keyword-qualifier-year   qualifier-year   key-part-qualifier-year)
   ))

;;; constant-*
(starmaps
 (lambda (name act-type param-type)
  (define-action
    :name name
    :act-type act-type
    :param-types (entuple value-part-string '&rest value-part-string)
    :expr-dict (mapkv :default #(.format #"\"{}\"" (.lstrip (.replace (.join "" @:) "Ġ" " "))))))
 '((constant-string value-string value-part-string)
   (constant-quantity value-quantity value-part-quantity)
   (constant-date value-date value-part-date)
   (constant-year value-year value-part-year)))

(define-action
  :name 'constant-number
  :act-type 'value-number
  :param-types '(value-quantity value-unit)
  :expr-dict (mapkv :default #(.rstrip (.format #"\"{} {}\"" @1 @2))))

(define-action
  :name 'constant-unit
  :act-type 'value-unit
  :param-types '(&rest value-part-unit)
  :expr-dict (mapkv :default #(.format #"\"{}\"" (.lstrip (.replace (.join "" @:) "Ġ" " ")))))

;;; token-*

(define-meta-action
  :meta-name 'token
  :name-fn (lambda (token) token)
  :expr-dict-fn (lambda (token)
                  (mapkv :default (.format #"\"{}\"" token)))
  :param-types '())

;; (define-meta-action
;;   :meta-name 'token-string
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'value-part-string
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-quantity
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'value-part-quantity
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-unit
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'value-part-unit
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-date
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'value-part-date
;;   :param-types '())

;; (define-meta-action
;;   :meta-name 'token-year
;;   :name-fn (lambda (token) token)
;;   :expr-dict-fn (lambda (token)
;;                   (mapkv :default (.format #"\"{}\"" token)))
;;   :act-type 'value-part-year
;;   :param-types '())
